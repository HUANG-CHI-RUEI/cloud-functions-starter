{
  "data": [
    {
      "id": "kotlin-blog-1",
      "title": "Kotlin 1.5.0-RC Released: Changes to the Standard and Test Libraries",
      "author": "Pavel Semyonov",
      "content": "Kotlin 1.5.0-RC is available with all the features planned for 1.5.0 – check out the entire scope of the upcoming release! New language features, stdlib updates, an improved testing library, and many more changes are receiving a final polish. The only additional changes before the release will be fixes. Try the modern Kotlin APIs on [&#8230;]",
      "coverUrl": "https://blog.jetbrains.com/wp-content/uploads/2021/04/1.5.0-RC-banners-01-1.png",
      "permalink": "https://blog.jetbrains.com/kotlin/2021/04/kotlin-1-5-0-rc-released/",
      "publishedAt": "2021-04-14T15:56:23"
    },
    {
      "id": "kotlin-blog-2",
      "title": "The Kotlin YouTube Channel",
      "author": "Alex Anisimov",
      "content": "The Kotlin community has always been the greatest source of inspiration for our team. We aspire to make the life of every Kotlin developer better, and we do our best to listen to all your feedback. With the increasing demand for more Kotlin-related video content, we would like to draw your attention to the Kotlin [&#8230;]",
      "coverUrl": "https://blog.jetbrains.com/wp-content/uploads/2021/04/YouTube-channel-banners-for-Kotlinlang-05.png",
      "permalink": "https://blog.jetbrains.com/kotlin/2021/04/the-kotlin-youtube-channel/",
      "publishedAt": "2021-04-13T11:03:03"
    },
    {
      "id": "andy-blog-1",
      "title": "[心得][202104] 91 的極速開發",
      "author": "Andy Lu",
      "content": "<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*FRDF9beiFzZ70Sy1XxhOaw.jpeg\" /><figcaption>Photo by <a href=\"https://unsplash.com/@jakegivens?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Jake Givens</a> on <a href=\"https://unsplash.com/s/photos/speed?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></figcaption></figure><p>還記得這堂課開始報名之前，我心裡百般糾結，因為當時的我認為：把程式寫好比寫快更重要，所以我遲遲沒有報名。當時在 91 的粉絲頁，91 還留言叫我趕快報名(入坑) XD</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/384/1*x7v1_Uc-rZf0DW0BHsj-0A.png\" /></figure><p>91 目前的三門課：單元測試、TDD以及極速開發，在極速開發上完之後，我也達成全修了😄。</p><p>我上課的順序是單元測試→TDD→極速開發。</p><p>在全部的課程上完之後，個人私心認為，順序應該是極速開發→單元測試→TDD。先讓自己的程式碼從腦中由手指輸入至鍵盤的速度提升，之後上其他的課程都會很快上手。因為 91 在上課的時候有時候就會神乎其技的使用祕技，就像是看著快打旋風中 Daigo 操控著殺意隆，那大殺四方的感覺，但輪到你操作時，你雖然知道這名角色很有威力，可是自己使用的時候卻沒辦法用出那些連續的招式。</p><h3>VIM</h3><p>極速開發的核心都是圍繞著 VIM ，雖然 VIM 已經推出 30 年了，但是依然可以在各個地方都可以看到他的蹤跡，除了 IDE 以外，Chrome 也有外掛可以使用 XD</p><p>所以練成 VIM 之後，不只可以在程式開發上可以提升速度，在 Chrome 上也可以提升速度，真是太神奇了傑克。</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*pqhcQR9o83ZUpAnUOz4pCA.gif\" /><figcaption>VIM cheat sheet</figcaption></figure><p>上圖為 VIM 的指令表，還記得與它初次見面時，不知道如何上手，該怎麼進行練習。</p><p>在 <a href=\"http://www.viemu.com/a_vi_vim_graphical_cheat_sheet_tutorial.html\">viemu.com</a> ，有將這張圖分解成七張圖，有興趣的朋友可以按照七張圖的順序慢慢練習，我是有稍微練習一下。</p><p>不過自己練習 VIM 最大的問題在於，可能不知道某些時候該用什麼指令，或是要如何才能更節省按鍵的次數。在課堂上，除了可以學習 VIM 以外，還可以利用在我們的程式碼中實地操作。</p><h3>「極速開發」只有教 VIM ?</h3><p>在上課之前，我問了 91 這個問題，我需要先學會 VIM 嗎？在課堂上只會教 VIM 嗎？首先，第一個問題是不需要，但是最好是可以先學一點，第二個問題答案是，不只是 VIM，因為 VIM 有其不足之處，所以我們需要用其他的工具來補足，或是其他的方式來彌補(Ex: vimrc, AceJump…)。</p><p>在課程結束之前，進行了一段 mob-programming，由一人在台上 coding，一人當 navigator，一人當指導(91)，每人５分鐘的時間按照 navigator的指示來無腦操作電腦，我覺得蠻有意思的。下圖為我上台寫 code 的照片。</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*BA_JkAmTQH9wRXH5c8hqDQ.jpeg\" /><figcaption>頭髮有點亂</figcaption></figure><h3>簡單紀錄 VIM 學習流程</h3><ol><li>先學會單鍵的功能。Ex: j 是游標往下，k 是游標往上。</li><li>學習組合鍵的按法。Ex: d5j 是刪除下面五行。</li><li>同一個步驟可能會有不同的操作方法，找出最少的那個。（就像高爾夫球比賽，追求最低桿）</li><li>將多次使用的組合鍵設定為巨集，那麼就可以在往後的日子裡省去更多重複的動作。</li></ol><h3>心得</h3><p>在商業思維學院 91 的講座 《學習永動機》裡面有提到，如何提升自己的技術來增加工作的效率、改善工作的時間，極速開發這門課就是解決時間不夠的一個好方法，很高興我有機會來上這堂課。</p><p>91 的課很特別，因為自費的人數很多，一堂萬元以上的課，居然大部分的人都是自費的，而且想來還不一定搶得到票，因為馬上都會爆滿。所以能夠有機會上９１的課要好好珍惜。</p><p>在課程的最後，91 放了一段影片(放在文章最後)，一群工程師將改裝一台腳踏車 — 腳踏車的龍頭往左轉時，輪胎會往右轉，反之，龍頭往右時，輪胎會往左轉。影片播放的時候，自己心想，如果是直線的話，根本就不會受到影響啊，但是，沒有一個人可以一騎上去就順利地往前騎。</p><p>這是為什麼呢？當我們自從小時候學會騎腳踏車之後，這項技能轉變為身體直接反應，而不需要大腦，當踏上腳踏車時，身體的所有肌肉都會同步的運作。但龍頭的方向轉變之後，看似簡單的改變，其實你的身體是無法反應的。</p><p>那麼，這台車能夠騎嗎？能，影片的主角每天花五分鐘練習，花了八個月終於學會如何騎那台單車，不過在他學會騎那台腳踏車之後，他反而不會騎原本的腳踏車了，他嘗試騎上正常的腳踏車，卻發現怎麼都沒辦法往前移動。</p><p>但是，過了一段時間的練習，他也可以騎乘原本的腳踏車了。</p><p>這個故事給了我們啟發，很多事情看似容易，其實是做了很久的練習以及努力而達成的成果。</p><p>上完極速開發之後，我嘗試開始使用 VIM 來寫程式碼，就像影片中的主角一樣，跌跌撞撞的。</p><p>９１請我們回去使用刻意練習的方式，每天錄一段影片，每段不要超過三十分鐘，一段時間之後，就可以看到自己的成長。我也在今天錄第一段極速開發的影片，開始我的極速開發之路。</p><p>最後，每次上課都會收到一本書，本次收到的是<strong>賽斯．高汀</strong>的《低谷》，９１說這本書影響他很深，且這本書也絕版了，所以我覺得我很幸運，能夠獲得這麼難得的書籍。</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*JeCao2INYu2yULCk1rPe1A.jpeg\" /></figure><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FMFzDaBzBlL0%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DMFzDaBzBlL0&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FMFzDaBzBlL0%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/f7efae6b23c816dad70bd17aeab8401a/href\">https://medium.com/media/f7efae6b23c816dad70bd17aeab8401a/href</a></iframe><blockquote>如果你覺得本篇文章寫的不錯，</blockquote><blockquote>請拍手👏鼓勵我～</blockquote><blockquote>拍手小秘訣，按著不放可以連續拍喔😊</blockquote><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fbutton.like.co%2Fin%2Fembed%2Fandyludeveloper%2Fbutton&amp;display_name=LikeCoin&amp;url=https%3A%2F%2Fbutton.like.co%2Fandyludeveloper&amp;image=https%3A%2F%2Fstorage.googleapis.com%2Flikecoin-foundation.appspot.com%2Flikecoin_store_user_andyludeveloper_main%3FGoogleAccessId%3Dfirebase-adminsdk-eyzut%2540likecoin-foundation.iam.gserviceaccount.com%26Expires%3D2430432000%26Signature%3DhKja7osNVEdG1mk0cqGwqixvE4f640UIJRVHcOVdXY4RqMlzn%252BpHLFMpcfSotdl0yYCT9WbGM%252FoyNsOUqEyxtGtRL1E7DI1X22QF7Z4NLo0SCGBg8wa4Zvkhz6nDQ84JCpwBcA8g3u5XcK65KYrvokwIpqcXyb7apbxpxwZUe8sLaspBf1iwaTRwjsAGP23Tx%252BgrqCdsUNUeI3I%252FBOOwIKg3t1jDxQ2X5l2XY9lhGMIsEHCVnKyqeGhT6M%252BWub8%252BnDbeRm9lUOiC2eMY70AbIBpBKS8HO8BQR450%252FSIEy8QnkoqRXjTfzepYh7I4VvZpgmwTj5ZTeWcUuxLD2mmj1w%253D%253D&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=like\" width=\"485\" height=\"212\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/bb0420040b0599c73914bb5b78705818/href\">https://medium.com/media/bb0420040b0599c73914bb5b78705818/href</a></iframe><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=b52b30f5aa70\" width=\"1\" height=\"1\" alt=\"\">",
      "coverUrl": "",
      "permalink": "https://andyludeveloper.medium.com/%E5%BF%83%E5%BE%97-202104-91-%E7%9A%84%E6%A5%B5%E9%80%9F%E9%96%8B%E7%99%BC-b52b30f5aa70?source=rss-5244e4bcd423------2",
      "publishedAt": "2021-04-12T10:28:23"
    },
    {
      "id": "andy-blog-2",
      "title": "[Kotlin 小撇步 #2] 委任 (Delegation)",
      "author": "Andy Lu",
      "content": "<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*rp5DraR87eGEok5RNryt-A.jpeg\" /><figcaption>Photo by <a href=\"https://unsplash.com/@heftiba?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Toa Heftiba</a> on <a href=\"https://unsplash.com/s/photos/help-me?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></figcaption></figure><p>我們在對 val 變數進行延遲初始化時，使用 by lazy 將 val 初始化的動作移到需要該變數的時候執行。</p><p>其中 by 這個關鍵字，代表的就是委任。</p><h3>委任 (Delegation)</h3><p>什麼是委任？白話一點的解釋，就是在某個類別所需要的功能可以交由其他的類別來處理。</p><p>假設有一個介面為 Uploader，它定義一個函式 upload</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/fc1ecbab40ffbc2e9245532f5bb35d8c/href\">https://medium.com/media/fc1ecbab40ffbc2e9245532f5bb35d8c/href</a></iframe><p>LogUploader 的類別繼承了這個介面，並且實作了這個函式</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/3cfcffd8a12e84b38583d6308a6aeb46/href\">https://medium.com/media/3cfcffd8a12e84b38583d6308a6aeb46/href</a></iframe><p>另一個 ImageUploader 的類別也繼承了這個介面，也同樣實作了這個函式：</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/e185afc2adb20c23725fc0bbc1f00770/href\">https://medium.com/media/e185afc2adb20c23725fc0bbc1f00770/href</a></iframe><p>當我們需要做上傳 Log 的時候，我們就會使用 LogUploader 類；<br>而當我們需要上傳 Image 的時候，我們就會使用 ImageUploader 類。</p><p>有一個 BackgroundService 類，我們可以將 Uploader 作為參數傳入，</p><p>依據傳入的具象類不同，我們所呼叫的 upload(any) 也會有不同的效果。</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/250e5e4c8612e6b67660c71d53aff5ea/href\">https://medium.com/media/250e5e4c8612e6b67660c71d53aff5ea/href</a></iframe><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/90fdf284100f3538d431151f1e2fa4d1/href\">https://medium.com/media/90fdf284100f3538d431151f1e2fa4d1/href</a></iframe><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/451/1*uSBGVX-hVZIW3-SNBoeCJQ.png\" /></figure><ul><li>可以看到，在 BackgroundService 的 upload(any) 只是單純地將由外面傳入的具象化 Uploader 直接呼叫其 upload(any) ，本身自己沒有做任何事。</li><li>自己不做任何事，委託外部的類別來完成，這個動作就叫做委託。</li></ul><p>好的，講了那麼多，還是沒有提到 by 的用法啊？</p><h3>by</h3><p>下面的 BackgroundService2 同樣也是使用委任的概念，跟前面不同的是使用了 by 關鍵字。</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/f5d1d60725255bca347a7e26fabf6456/href\">https://medium.com/media/f5d1d60725255bca347a7e26fabf6456/href</a></iframe><p>可以發現，用 by 之後，整個程式碼都不用寫了，清爽許多。</p><p>我們來測試看看是不是真的有達到替換的效果。</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/b6f5122224cc2173c258a1fb7b83df91/href\">https://medium.com/media/b6f5122224cc2173c258a1fb7b83df91/href</a></iframe><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/451/1*ofhIeXzymnuFs4G_fTuSZQ.png\" /></figure><p>兩種寫法的結果都是一樣的 👍</p><h3>結論</h3><p>為什麼要使用委任呢？可以讓類別的使用增加彈性，如上方的範例，我們傳入 Uploader 這個介面，目的是希望 BackgroundService 可以成為一個通用的類別，只要是實作 Uploader 介面的類別都可以傳進來。</p><p>利用 Kotlin 所提供的 by 關鍵字，可以讓我們更輕鬆的完成委任的動作。</p><h4>參考資料</h4><p><a href=\"https://kotlinlang.org/docs/delegation.html\">https://kotlinlang.org/docs/delegation.html</a></p><blockquote>如果你覺得本篇文章寫的不錯，</blockquote><blockquote>請拍手👏鼓勵我～</blockquote><blockquote>拍手小秘訣，按著不放可以連續拍喔😊</blockquote><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fbutton.like.co%2Fin%2Fembed%2Fandyludeveloper%2Fbutton&amp;display_name=LikeCoin&amp;url=https%3A%2F%2Fbutton.like.co%2Fandyludeveloper&amp;image=https%3A%2F%2Fstorage.googleapis.com%2Flikecoin-foundation.appspot.com%2Flikecoin_store_user_andyludeveloper_main%3FGoogleAccessId%3Dfirebase-adminsdk-eyzut%2540likecoin-foundation.iam.gserviceaccount.com%26Expires%3D2430432000%26Signature%3DhKja7osNVEdG1mk0cqGwqixvE4f640UIJRVHcOVdXY4RqMlzn%252BpHLFMpcfSotdl0yYCT9WbGM%252FoyNsOUqEyxtGtRL1E7DI1X22QF7Z4NLo0SCGBg8wa4Zvkhz6nDQ84JCpwBcA8g3u5XcK65KYrvokwIpqcXyb7apbxpxwZUe8sLaspBf1iwaTRwjsAGP23Tx%252BgrqCdsUNUeI3I%252FBOOwIKg3t1jDxQ2X5l2XY9lhGMIsEHCVnKyqeGhT6M%252BWub8%252BnDbeRm9lUOiC2eMY70AbIBpBKS8HO8BQR450%252FSIEy8QnkoqRXjTfzepYh7I4VvZpgmwTj5ZTeWcUuxLD2mmj1w%253D%253D&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=like\" width=\"485\" height=\"212\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/bb0420040b0599c73914bb5b78705818/href\">https://medium.com/media/bb0420040b0599c73914bb5b78705818/href</a></iframe><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=7430b2d51115\" width=\"1\" height=\"1\" alt=\"\">",
      "coverUrl": "",
      "permalink": "https://andyludeveloper.medium.com/kotlin-%E5%B0%8F%E6%92%87%E6%AD%A5-2-%E5%A7%94%E4%BB%BB-delegation-7430b2d51115?source=rss-5244e4bcd423------2",
      "publishedAt": "2021-04-09T10:07:40"
    },
    {
      "id": "kotlin-blog-3",
      "title": "How Do You Use Stack Overflow? The Kotlin Community Survey",
      "author": "Alina Dolgikh",
      "content": "Stack Overflow is an essential resource when it comes to learning something new about programming. It is easily searchable, used by millions of people, and extremely popular in the software engineering community. During the Kotlin Census 2020, 55% of respondents mentioned Stack Overflow as a helpful learning resource. However, sometimes we hear that finding Kotlin-related [&#8230;]",
      "coverUrl": "https://blog.jetbrains.com/wp-content/uploads/2021/04/KotlinStackoverflow-02.png",
      "permalink": "https://blog.jetbrains.com/kotlin/2021/04/how-do-you-use-stack-overflow-the-kotlin-community-survey/",
      "publishedAt": "2021-04-08T13:10:44"
    }
  ]
}